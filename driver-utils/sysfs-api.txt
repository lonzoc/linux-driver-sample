	Linux Sysfs APIs
============================

APIs for device driver
#incluede <linux/sysfs.h>

像其他文件系统一样，sysfs文件系统也有directory、file、link这些成员。

0.Index
=======
	- 1.Create Sysfs Directory
	- 2.Create Sysfs File
		- 2.1Device Attribute
		- 2.2Class Attribute
		- 2.4Customized Attribute
	- 3.Create Sysfs Link
	- 4.Create Sysfs Group
	- 5.Create Sysfs Bin File
	- 6.Notify Userspace's Program


1.Create Sysfs Driectory
========================

int sysfs_create_dir(struct kobject *kobj);

调用该函数将为kobj在sysfs文件系统中创建一个目录项，如果kobj->parent不为空，则将
在kobj->parent对应的目录下创建子目录；如果kobj->parent为NULL，则将在sysfs的根
路径下创建目录。

2.Create Sysfs File
===================

sysfs file是在用户空间sysfs文件系统下看到的虚拟文件，其实在Kernel中它对应的是
sysfs attribute，创建sysfs file的步骤稍微复杂一点，通常你需要编写show方法和store
方法。

2.1Device Attribute
-------------------

Step1：创建show/Store方法签名

Show方法签名：
static ssize_t samp_dev_show(struct device *dev, struct device_attribute *attr,
		char *buf);

Store方法签名：
static ssize_t samp_dev_store(struct device *dev, struct device_attribute *attr,
		const char *buf, size_t count);


Step2: 创建device attribute变量

static DEVICE_ATTR(samp_dev, 0660, samp_dev_show, samp_dev_store);

此宏展开为
static struct device_attribute samp_dev = __ATTR(samp_dev, 0660, samp_dev_show,
		samp_dev_store);


__ATTR宏展开为
#define __ATTR(_name,_mode,_show,_store) { \
	.attr = {.name = __stringify(_name), .mode = _mode },	\
	.show	= _show,					\
	.store	= _store,					\
}

Step3：创建device sysfs file

int sysfs_create_file(struct kobject *kobj, const struct attribute *attr);
or
int device_create_file(struct device *device, const struct device_attribute *entry);


2.2Class Attribute
------------------

Step1：创建show/Store方法签名

Show方法签名：
static ssize_t samp_class_show(struct class *class, struct class_attribute *attr,
		char *buf);

Store方法签名：
static ssize_t samp_class_store(struct class *class, struct class_attribute *attr,
		const char *buf, size_t count);

Step2: 创建class attribute

static CLASS_ATTR(samp_class, 0660, samp_class_show, samp_class_store);

此宏展开为
static struct class_attribute samp_class = __ATTR(samp_class, 0660,
		samp_class_show, samp_class_store);


Step3: 创建class sysfs file

int class_create_file(struct class *class, const struct class_attribute *attr);
or
int sysfs_create_file(struct kobject *kobj, const struct attribute *attr);


2.3Customized Attribute
-----------------------

通常情况是使用device attribute就可以满足绝大多数driver的要求，如果无法满足再考虑自定义
attribute。

Device attribute和class attribute属于不同的kobj_type，不同ktype的store方法和show方
法具有不同的签名，内核定义许多kobj_type，例如：
	driver_ktype bus_ktype device_ktype ktype_cpufreq ktype_pci_instance ...

driver开发者可以自定义新的ktype，有了自定义的ktype才可以创建自定义的attribute。

开发步骤可归纳为：
	1) 创建自定义attribute结构体
	2) 创建自定义attribute的sysfs_ops
	3) 创建新的kobj_type
	4) 定义自定义attribute，e.g. attribute a
	5) 定义自定义attribute a的show/store方法
	6) 通过sysfs_create_file创建对应attribute a的sysfs file

以下是详细步骤
创建kobj_type, 需要如下3步

Step1: 自定义attribute结构体

struct samp_attribute {
	/* these tree members below is always necessary */
	struct attribute attr;
	ssize_t (*show)(struct samp_attribute *, char *);
	ssize_t (*store)(struct samp_attribute *, const char *, size_t);
	
	/* but you can add more member if you want */
	int val_a;
}
show和store的签名可以随意定制，你可将任何需要的数据结构放到签名列表里。

/* this macro is used to define our customized attr *
#define SAMP_ATTR(_name, _mode, _show, _store) \
struct samp_attribute samp_attr_##_name = { \
	.attr = {.name = __stringify(_name), .mode = _mode }, \
	.show	= _show,					\
	.store	= _store,					\
	.val_a = 1           \
}

Step2：创建sysfs_ops

/* macro used to find samp_attribute by kobj pointer */
#define to_samp_attr(a)	container_of(a, struct samp_attribute, attr)

/* transfer show interface  */
static ssize_t samp_sysfs_show(struct kobject *kobj, struct attribute *attr,
		char *buf)
{
	struct samp_attribute *samp_attr = to_samp_attr(attr);
	int ret = -EINVAL;

	if (samp_attr)
		ret = samp_attr->show(samp_attr, buf);

	return ret;
}

/* transfer store interface */
static ssize_t samp_sysfs_store(struct kobject *kobj, struct attribute *attr,
		const char *buf, size_t count)
{
	struct samp_attribute *samp_attr = to_samp_attr(attr);
	int ret = -EINVAL;

	if (samp_attr)
		ret = samp_attr->store(samp_attr, buf, count);

	return ret;
}

/* sysfs operations for our customized attribute */
static const struct sysfs_ops samp_sysfs_ops = {
	.show = samp_sysfs_show,
	.store = samp_sysfs_store
};

Step3: 创建kobj_type

/* release resource if no one is hold reference to this kobj */
static void samp_sysfs_release(struct kobject *kobj)
{
	//kfree();
}

static struct kobj_type samp_ktype {
	.release = samp_sysfs_release,
	.sysfs_ops = &samp_sysfs_ops,
	///.default_attr = 
};


创建自定义attribute

Step1: 创建show/Store方法

show对应read属性，store对应write属性，开发者需要确定属性的rw属性，如属性具有rw属性，
则show store方法均需要提供，否则只用提供其中一部分。

static ssize_t samp_z_show(struct samp_attribute *samp_attr, char *buf)
{
	/* for example, put some infomation to user space */
	return snprintf(buf, PAGE_SIZE, "%d", samp_attr->val_a);
}

static ssize_t samp_z_store(struct samp_attribute *samp_attr, const char *buf,
		size_t count)
{
	int a, ret = -EINVAL;
	if (sscanf(buf, "%d", &a)) {
		samp_attr->val_a = a;
		ret = count;
	}

	return ret;
}

Step2: 创建自定义的attribute
static SAMP_ATTR(val_a, S_IRUSR | S_IWUSE, samp_z_show, samp_z_store);
or
static struct samp_attribute samp_attr_val_a = {
	.attr = {.name = __stringify("val_a"), .mode = S_IRUSR | S_IWUSE },
	.show	= samp_z_show,
	.store	= _storsamp_z_storee,
	.val_a = 1
};


创建sysfs file

/* kobject should be embed in you own structure,
 * define a single kobjec is not recommended */
struct samp_struct {
	struct kobject kobj;
	int a, b, c;
	/* other members */
};

static int samp_init(void) {
	struct samp_struct *samp;
	int ret;

	samp = kzalloc(sizeof(*samp), GFP_KERNEL);
	if (!samp)
		return -ENOMEM;

	ret = kobject_init_and_add(&samp->kobj,
			 &samp_ktype,/*kobj_type*/
			 NULL,/*parent kobject*/
			 "samp_sysfs");
	if (ret)
		return ret; /* error */

	kobject_uevent(&samp->kobj, KOBJ_ADD);

	ret = sysfs_create_file(&samp->kobj, &samp_attr_val_a);
	return ret;
}


3.Create Sysfs Link
===================

创建链接文件
int sysfs_create_link(struct kobject *kobj, struct kobject *target,
				   const char *name);

移除链接文件
void sysfs_remove_link(struct kobject *kobj, const char *name);

重命名链接文件
int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
			const char *old_name, const char *new_name);

删除链接文件
void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
			const char *name);

假设已经创建了/sys/devices/platform/pdev.0这个目录（对应内核的一个kobject, 假设为kobj_a），
我们可以为其创建一个位于sysfs根路径的link：
	sysfs_create_link(NULL, kobj_a, "link_to_a");
这样就可以通过/sysfs/link_to_a访问kobj_a的内容。


4.Create Sysfs Group
====================

一组attribute组成了一个group，你可以将所有的attribute以组的形式创建也可以每个attribute
单独创建。

以device attribute为例

static DEVICE_ATTR(a, 0660, a_show, a_store);
static DEVICE_ATTR(b, 0440, a_show, NULL);

static struct attribute *attrs[] = {
	&dev_attr_a.attr,
	&dev_attr_b,attr,
	NULL
};

static struct attribute_group attr_group = {
	.attrs = attrs,
};

static void init(struct kobject *kobj)
{
	if (sysfs_create_group(kobj, &attr_group) < 0)
		printk(KERN_ERR "error");
}


5.Create Sysfs Bin File
=======================

一般来说，sysfs attribute的内容是以ASCII码形式表示的，用户可以通过类似cat这样的命令直
接在终端上看到attribute的值。但有时候需要通过sysfs传递二进制数据，这时就该sysfs bin
attribute上场了。

struct bin_attribute {
	struct attribute	attr;
	size_t			size;
	void			*private;
	ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
			char *, loff_t, size_t);
	ssize_t (*write)(struct file *,struct kobject *, struct bin_attribute *,
			 char *, loff_t, size_t);
	int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
		    struct vm_area_struct *vma);
};

通常你需要创建一个新的bin_attribute结构体变量，根据设计的读写权限有选择的实现read/write/
mmap接口。然后使用以下两个API来创建和移除sysfs bin file。

int sysfs_create_bin_file(struct kobject *kobj, const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj, const struct bin_attribute *attr);


6.Notify Userspace's Program
============================

用户空间程序可以通过poll方法来等待某个attribute，而内核可以在适当的时机通知用户空间程序。

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);
void sysfs_notify_dirent(struct sysfs_dirent *sd);

